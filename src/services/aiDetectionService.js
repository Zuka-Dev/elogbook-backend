// src/ai/detection/detect.js
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { HumanMessage } from "@langchain/core/messages";

/**
 * Detects the likelihood of content being AI-generated using a Google Gemini model.
 * This approach relies on prompt engineering and the LLM's qualitative assessment,
 * and should not be considered a definitive or scientifically validated AI detector.
 *
 * @param {string} text The content to analyze for AI generation.
 * @returns {Promise<{ai_likelihood_score: number, reasoning: string} | null>} An object containing the AI likelihood score (0-100) and reasoning, or null if detection fails.
 */
export const detectAIContent = async (text) => {
  if (!process.env.GOOGLE_API_KEY) {
    console.error("GOOGLE_API_KEY is not set for AI content detection.");
    return null;
  }

  // Use a capable and available Gemini model
  const chatModel = new ChatGoogleGenerativeAI({
    apiKey: process.env.GOOGLE_API_KEY,
    model: "gemini-1.5-flash-latest", // As per your ListModels output
    temperature: 0.1, // Lower temperature for more consistent, less creative output
  });

  // Define the JSON schema for the desired output
  const responseSchema = {
    type: "OBJECT",
    properties: {
      ai_likelihood_score: { type: "NUMBER" }, // Score from 0 to 100
      reasoning: { type: "STRING" }, // LLM's reasoning for the score
    },
    required: ["ai_likelihood_score", "reasoning"],
  };

  const promptContent = `
    Analyze the following text and assess the likelihood that it was generated by an AI.
    Provide a confidence score from 0 (highly likely human-written) to 100 (highly likely AI-generated).
    Also, provide a brief reasoning for your assessment.
    Your response MUST be a JSON object with two keys: "ai_likelihood_score" (number) and "reasoning" (string).
    Ensure the "ai_likelihood_score" is a number between 0 and 100.

    Example of expected JSON output:
    {
      "ai_likelihood_score": 85,
      "reasoning": "The text uses highly formal language and repetitive phrasing typical of AI."
    }

    Text to analyze:
    ---
    ${text}
    ---
    `;

  const prompt = new HumanMessage({
    content: promptContent,
  });

  try {
    const response = await chatModel.invoke([prompt], {
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: responseSchema,
      },
    });

    let jsonString = response.content;

    // Remove markdown code block delimiters if they are present
    jsonString = jsonString.replace(/^```json\s*|```\s*$/g, "").trim();

    const result = JSON.parse(jsonString);

    // Basic validation of the parsed result to ensure it's in the expected format
    if (
      typeof result.ai_likelihood_score !== "number" ||
      result.ai_likelihood_score < 0 ||
      result.ai_likelihood_score > 100
    ) {
      console.error(
        "LLM returned an invalid ai_likelihood_score format or range:",
        result
      );
      return null;
    }
    if (typeof result.reasoning !== "string") {
      console.error("LLM returned invalid reasoning format:", result);
      return null;
    }

    return result; // Returns { ai_likelihood_score: number, reasoning: string }
  } catch (error) {
    console.error("Error invoking Gemini for AI detection:", error.message);
    return null;
  }
};
